/* Copyright 2011 Masson Studio

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   author: Masson
      see: http://www.imasson.com/
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace IMasson.Util.TinyLogger.Recorder
{
    /// <summary>
    /// A LogRecroder that write log messages to a single plain file.
    /// This is only a simple prototype of file logger. The log file will become bigger
    /// and bigger and the develper must clear it manually. And I think it is a big 
    /// issue that we should fix in next version.
    /// </summary>
    public class PlainFileLogRecorder : AsyncLogRecorder
    {
        private const string OutputFormat = "--{0:yy-MM-dd hh:mm:ss} [{1,-8}] {2,12}: {3}";

        /// <summary>The default log file path generated by the app's path</summary>
        public static readonly string DefaultFilePath =
           AppDomain.CurrentDomain.SetupInformation.ApplicationBase + 
           AppDomain.CurrentDomain.FriendlyName + ".log";

        /// <summary>The burffer size while writing log into the stream writer</summary>
        protected const int BurfferSize = 4096;

        private string _filePath = null;

        /// <summary>
        /// The file path that the log write to
        /// </summary>
        public string FilePath
        {
            get { return _filePath; }
            set { _filePath = value; }
        }

        /// <summary>The StreamWriter to write plain file</summary>
        protected StreamWriter streamWriter = null;


        /// <summary>
        /// Construct the PlainFileLogRecorder on default log file path. 
        /// See <see cref="DefaultFilePath"/>
        /// </summary>
        public PlainFileLogRecorder() : this(DefaultFilePath) { }

        /// <summary>
        /// Construct the PlainFileLogRecorder by specified log file path
        /// </summary>
        /// <param name="filePath">The path of the log file</param>
        public PlainFileLogRecorder(string filePath)
        {
            _filePath = filePath;

            try
            {
                FileStream fs = new FileStream(filePath, FileMode.Append);
                streamWriter = new StreamWriter(fs, System.Text.Encoding.UTF8, BurfferSize);
                this.Alive = true;
            }
            catch (Exception)
            {
                streamWriter = null;
            }
        }


        /// <summary>
        /// Record the log message to the target file.
        /// </summary>
        /// <param name="logMessage">The log message object to record</param>
        protected override void Record(LogMessage logMessage)
        {
            if (streamWriter == null) return;
            if (logMessage == null) return;

            DateTime time = DateTime.FromBinary(logMessage.Time);
            String level = Enum.GetName(typeof(LogLevel), logMessage.Level);
            try
            {
                streamWriter.WriteLine(
                        OutputFormat, time, level, logMessage.Tag, logMessage.Message);
            }
            catch (Exception)
            {
                streamWriter = null;
            }
        }

        /// <summary>
        /// Call when the log message dispatcher start.
        /// </summary>
        protected override void onStart()
        {
            // nothing to do
        }

        /// <summary>
        /// Call when the log message dispatcher stop.
        /// </summary>
        protected override void onStop()
        {
            if (streamWriter != null)
            {
                try
                {
                    streamWriter.Flush();
                    streamWriter.Close();
                    this.Alive = false;
                }
                catch (Exception)
                {
                }
                finally
                {
                    streamWriter = null;
                }
            }
        }
    }
}
